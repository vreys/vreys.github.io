---
layout: post
title:  "5 принципов разработки через тестирование"
date:   2015-10-26 13:51:54
categories: tdd
comments: true
---
Есть много материала о том как правильно вести разрабокту через тестирование и как это делать не правильно. Сейчас я хочу поделиться своим опытом, который выражен в 5 принципах. Больше всего это будет полезно тем, кто только делает первые шаги и только начал открывать для себя TDD. Те, для кого это не в новинку, уже, наверняка, вывели те же принципы для себя.



Я позиционирую себя как Ruby-разработчик и хоть какой-то ощутимый опыт у меня есть именно в области, связанной с эти языком. Но, в данном случае, нет привязок к какому-то конкретному языку или фреймворку, и, надеюсь, статья будет полезна не только Ruby-стам.

Теперь по сути.

## Принцип №1: сначала тест.

Согласно TDD, решение задачи начинается с вопроса «как это протестировать?». И, если уже на данном этапе возникают трудности, то возможно стоит переосмыслить задачу и уточнить требования и условия ее выполнения. Более того, можно значительно поднять точность оценки, если еще на этапе планирования представить какие тестовые сценарии потребуются написать, чтобы задача была решена. Это здорово помогает держать фокус только на самом важном и соблюдать баланс между точностью оценки и затрачиваемым на нее время.

Приступая к написанию теста лучше начать с самых простых и очевидных сценариев. Когда самые очевидные сценарии выполнены можно перейти к более редким или сложным. И так далее, пока не будет сделано ровно столько работы, сколько требуется для того, чтобы задача считалась выполненной.

## Принцип №2: тест – это тоже код.

Едва ли удастся написать хороший тест, используя плохой код. Очевидно, что при написании теста работают те же правила, что и при написании кода, выполняющего непосрдсвенно бизнес-требования. Форматирование, структурированность и читабельность в тестах на столько же важны, как и в других местах. Без рефакторинга
есть огромный риск получить тест, который трудно сопровождать и, в итоге, придется вовсе пренебречь им в самый ответственный момент, когда нужно быстро что-то поправить, а времени разбираться совсем нет.

## Принцип №3: только полное покрытие тестами.

Говоря полное, я подразумеваю близкое к 100%-му. Если быть точнее, то 95% это близко, а 80% – нет. Если тестами покрыта половина кода, то пользы не будет. Ведь, по прежнему остается слишком большая вероятность того, что в каком-то месте случилась неприятность, но о ней еще не известно. Нередко в таких случаях последствия могут быть очень серьезными. Разумеется, в случаях, когда практика разработки через тестирование вводится не с самого начала, то полного покрытия сразу достичь не получится. И 50% это сильно лучше, чем совсем ничего. Здесь важно не останавливаться и стремиться к полному покрытию.

## Принцип №4: красный тест – это незаконченная работа.

Если вы пользуютесь системой контроля версий кода (странно, если нет) и в ветку, где должна быть стабильная версия приложения, попадает версия с красными тестами, то это не просто дурной тон, но и большой риск, что неисправность попадет в продакшен. Думаю, всем известно, что неисправность в продакшене – дело серьезное. Интеграционный сервер
может этого не допустить, но он не всегда имеется.

## Принцип №5: быстрые и частые тесты.

Чем быстрее выполняются тесты, тем чаще их запускают. И наоборот – медленные тесты приводят к постепенному принебрежению ими. Полная прогонка тестов необходима в начале работы над очередной задачей, после завершения работы над ней и после того, как ваши изменения были объеденены с результами работы всей команды. Если пропустить первую прогонку (перед какими либо изменениями), то может получиться так, что некоторые тесты уже были красными, когда версия попала к вам и, обычно, такое выясняется не сразу и ведет к потере времени и нервов. Если не прогонять все тесты после выполнения задачи, то можно упустить неисправности, которые произошли там, где, казалось бы, их не должно быть. И если прогонять все тесты до и после работы над задачей, но забывать делать это после слияния с кодом остальной команды, то есть риск пропустить конфликт изменений. Здесь важно найти не виновника поломки, а выяснить момент на котором что-то пошло не так. Сами методики оптимизации скорости выполнения тестов не входят в рамки этой статьи, но они есть и, иногда, необходимо их использовать.

Я полагаюсь на эти принципы каждый день. Есть еще множество тонкостей и ситуаций, которые можно и нужно рассмотреть подробно и с примерами.

В следующий раз я расскажу о том, как я разрабатываю и тестирую Rails-приложения.